<Project>
    <!-- 
    <PropertyGroup>
        <PackagingAuthor>wwwDayDream</PackagingAuthor>

        <PackagingIcon>./icon.png</PackagingIcon>
        <PackagingREADME>../README.md</PackagingREADME>
        <PackagingLICENSE>../LICENSE</PackagingLICENSE>
        <PackagingOutputPath>./dist</PackagingOutputPath>
        <PackagingDescription>%(PackagingREADME)[0]</PackagingDescription>
        <PackagingProjectURL>$(GH_REPO_URL)</PackagingProjectURL>
        <PackagingRepositoryURL>$(GH_REPO_GIT_URL)</PackagingRepositoryURL>
        <PackagingRepositoryBranch>$(GH_REPO_DEFAULT_BRANCH)</PackagingRepositoryBranch>
        <PackagingContainsNSFW>false</PackagingContainsNSFW>
        <PackagingVersion>$(PlainVersion)</PackagingVersion>
        <ThunderstoreNamespace>$(PackagingAuthor)</ThunderstoreNamespace>
        <ThunderstoreName>$(SolutionName)</ThunderstoreName>
        <ThunderstoreDestination>https://thunderstore.dev</ThunderstoreDestination>
    </PropertyGroup>
    <ItemGroup>
        <PackagingCommunities Include="test"/>
        <PackagingDependencies Include="Author-Plugin"><DepVersion>0.0.1</DepVersion></PackagingDependencies>
        <PackagingBuildCopies Include="some/file/path.dll"><MapTo>/</MapTo></PackagingBuildCopies>
        <PackagingCategories Include="Mod"/>
    </ItemGroup>
    -->
    <Target Name="PackagingDataSetup" BeforeTargets="GenerateNuspec;Build">
        <PropertyGroup Label="Setup Optional Properties">
            <PackagingAuthor Condition="'$(PackagingAuthor)' == ''">wwwDayDream</PackagingAuthor>
            <PackagingIcon Condition="'$(PackagingIcon)' == ''">./icon.png</PackagingIcon>
            <PackagingREADME Condition="'$(PackagingREADME)' == ''">../README.md</PackagingREADME>
            <PackagingLICENSE Condition="'$(PackagingLICENSE)' == ''">../LICENSE</PackagingLICENSE>
            <PackagingOutputPath Condition="'$(PackagingOutputPath)' == ''">./dist</PackagingOutputPath>
            <PackagingProjectURL Condition="'$(PackagingProjectURL)' == ''">$(GH_REPO_URL)</PackagingProjectURL>
            <PackagingRepositoryURL Condition="'$(PackagingRepositoryURL)' == ''">$(GH_REPO_GIT_URL)</PackagingRepositoryURL>
            <PackagingRepositoryBranch Condition="'$(PackagingRepositoryBranch)' == ''">$(GH_REPO_DEFAULT_BRANCH)</PackagingRepositoryBranch>
            <PackagingContainsNSFW Condition="'$(PackagingContainsNSFW)' == ''">false</PackagingContainsNSFW>
            <PackagingVersion Condition="'$(PackagingVersion)' == ''">$(PlainVersion)</PackagingVersion>
            <ThunderstoreNamespace Condition="'$(ThunderstoreNamespace)' == ''">$(PackagingAuthor)</ThunderstoreNamespace>
            <ThunderstoreName Condition="'$(ThunderstoreName)' == ''">$(SolutionName)</ThunderstoreName>
            <ThunderstoreDestination Condition="'$(ThunderstoreDestination)' == ''">https://thunderstore.dev</ThunderstoreDestination>
        </PropertyGroup>

        <Message Importance="high" Text="$(GH_REPO_COMMIT_HASH)"/>

        <ReadLinesFromFile Condition="Exists($(PackagingREADME))" File="$(PackagingREADME)">
            <Output TaskParameter="Lines" ItemName="PackagingREADMEFileLines"/>
        </ReadLinesFromFile>

        <ItemGroup Condition="'@(PackagingREADMEFileLines->Count())' > 0">
            <PackagingREADMEFileLinesReversed Include="@(PackagingREADMEFileLines->Reverse())"/>
            <PackagingREADMENoHashFileLines Include="@(PackagingREADMEFileLinesReversed)"
                Condition="'$([System.String]::Copy(&quot;%(PackagingREADMEFileLinesReversed.Identity)&quot;).Replace(&quot;#&quot;, &quot;&quot;))' == '%(PackagingREADMEFileLinesReversed.Identity)'"/>
        </ItemGroup>

        <PropertyGroup Label="Late Defaults">
            <PackagingDescription Condition="'$(PackagingDescription)' == ''">%(PackagingREADMENoHashFileLines.Identity)</PackagingDescription>
        </PropertyGroup>

        <ItemGroup Label="Missing Requirements Check">
            <ErrorMissingParams Condition="'@(PackagingCommunities->Count())' == 0" Include="Missing PackagingCommunities"/>
            <ErrorMissingParams Condition="!Exists($(PackagingIcon))" Include="PackagingIcon Not Found "/>
            <ErrorMissingParams Condition="!Exists($(PackagingREADME))" Include="PackagingREADME Not Found "/>
            <ErrorMissingParams Condition="!Exists($(PackagingLICENSE))" Include="PackagingLICENSE Not Found "/>
        </ItemGroup>
        
        <Error Condition="'@(ErrorMissingParams->Count())' > 0" Text="@(ErrorMissingParams, ', ')! Skipping TCLI Build!"/>

        <ItemGroup Label="Final Includes">
            <None Include="$(PackagingIcon)" Pack="true" PackagePath="" />
            <None Include="$(PackagingREADME)" Pack="true" PackagePath="" />
            <None Include="$(PackagingLICENSE)" Pack="true" PackagePath="" />
        </ItemGroup>

        <PropertyGroup Label="Update External MSBuild Properties">
            <!-- Nuget.Build.Tasks.Pack.targets :: PackTask -->
            <Title>$(ThunderstoreName)</Title>
            <Authors>$(PackagingAuthor)</Authors>
            <PackageId>$(ThunderstoreNamespace).$(ThunderstoreName)</PackageId>
            <PackageVersion>$(PackagingVersion)</PackageVersion>
            <PackageOutputPath>$(PackagingOutputPath)</PackageOutputPath>
            <PackageDescription>$(PackagingDescription)</PackageDescription>
            <PackageProjectUrl>$(PackagingProjectURL)</PackageProjectUrl>
            <RepositoryUrl>$(PackagingRepositoryURL)</RepositoryUrl>
            <RepositoryType>git</RepositoryType>
            <RepositoryBranch>$(PackagingRepositoryBranch)</RepositoryBranch>
            <PackageLicenseFile>$([System.IO.Path]::GetFileName('$(PackagingLICENSE)'))</PackageLicenseFile>
            <PackageReadmeFile>$([System.IO.Path]::GetFileName('$(PackagingREADME)'))</PackageReadmeFile>
            <PackageIcon>$([System.IO.Path]::GetFileName('$(PackagingIcon)'))</PackageIcon>
        </PropertyGroup>
    </Target>
    <Target Name="AfterBuildPreNupkgCreation" AfterTargets="Build" BeforeTargets="GenerateNuspec">
        <PropertyGroup>
            <TomlOffset>../../../</TomlOffset>

            <OutputTomlPath>$(IntermediateOutputPath)thunderstore.toml</OutputTomlPath>
            <PackagesOutputPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectPath)$(PackageOutputPath)'))</PackagesOutputPath>
            <NupkgOutputPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectPath)$(PackageOutputPath)$(PackageId).$(PackageVersion).nupkg'))</NupkgOutputPath>
            <TCLIOutputPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectPath)$(PackageOutputPath)$(PackageAuthor)-$(PackageId)-$(PackageVersion).zip'))</TCLIOutputPath>
        </PropertyGroup>
        <Delete Condition="Exists($(NupkgOutputPath))" Files="$(NupkgOutputPath)"/>
        <Delete Condition="Exists($(TCLIOutputPath))" Files="$(TCLIOutputPath)"/>

        <ItemGroup Label="Build TOML">
            <TCLI_QuotedCommunities Include="&quot;%(PackageCommunities.Identity)&quot;"/>
            <TCLI_QuotedCategories Include="&quot;%(PackageCommunityCategories.Identity)&quot;"/>
            <PackagingBuildCopies Include="$(PackagingLICENSE)"><MapTo>/</MapTo></PackagingBuildCopies>

            <TomlLines Include="[config]"/>
            <TomlLines Include="schemaVersion = &quot;0.0.1&quot;"/>

            <TomlLines Include="[package]"/>
            <TomlLines Include="namespace = &quot;$(ThunderstoreNamespace)&quot;"/>
            <TomlLines Include="name = &quot;$(ThunderstoreName)&quot;"/>
            <TomlLines Include="versionNumber = &quot;$(PackagingVersion)&quot;"/>
            <TomlLines Include="description = &quot;$(PackagingDescription)&quot;"/>
            <TomlLines Include="websiteUrl = &quot;$(PackagingProjectURL)&quot;"/>
            <TomlLines Include="containsNsfwContent = $(PackagingContainsNSFW)"/>
            
            <TomlLines Include="[package.dependencies]"/>
            <TomlLines Condition="'@(PackagingDependencies->Count())' > 0" Include="%(PackagingDependencies.Identity) = &quot;%(PackagingDependencies.DepVersion)&quot;"/>
            
            <TomlLines Include="[build]"/>
            <TomlLines Include="icon = &quot;$(TomlOffset)$([System.String]::Copy('$(PackagingIcon)').Replace('\','/'))&quot;"/>
            <TomlLines Include="readme = &quot;$(TomlOffset)$([System.String]::Copy('$(PackagingREADME)').Replace('\','/'))&quot;"/>
            <TomlLines Include="outdir = &quot;$(TomlOffset)$([System.String]::Copy('$(PackagingOutputPath)').Replace('\','/'))&quot;"/>

            <TomlLines Include="[[build.copy]]%0Asource = &quot;$(TomlOffset)$([System.String]::Copy('%(PackagingBuildCopies.Identity)').Replace('\','/'))&quot;%0Atarget = &quot;%(PackagingBuildCopies.MapTo)&quot;"/>
            
            <TomlLines Include="[publish]"/>
            <TomlLines Include="repository = &quot;$(ThunderstoreDestination)&quot;"/>
            <TomlLines Include="communities = [ $(@(TCLI_QuotedCommunities, ', ')) ]"/>
            <TomlLines Include="categories = [ $(@(TCLI_QuotedCategories, ', ')) ]"/>
        </ItemGroup>

        <WriteLinesToFile File="$(OutputTomlPath)" Lines="@(TomlLines)" Overwrite="true" WriteOnlyWhenDifferent="true" />
        
        <Exec Command="dotnet tool list -g tcli || dotnet tool install -g tcli"/>
        <Exec Command="tcli build --config-path &quot;$(OutputTomlPath)&quot;"/>
    </Target>

    <Target Name="PostPackFileWrites" AfterTargets="GenerateNuspec">
        <Message Importance="high" Text="$(NupkgOutputPath);$(TCLIOutputPath);$([System.IO.Path]::GetFullPath('$(MSBuildProjectPath)$(OutputTomlPath)'))"/>
    </Target>
</Project>